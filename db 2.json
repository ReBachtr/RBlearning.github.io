{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/huaicon_black.png","path":"images/huaicon_black.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/huaicon_car.png","path":"images/huaicon_car.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/huaicon_white.png","path":"images/huaicon_white.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d668e124dcf4003bde6157118cfeb7f91d589c0a","modified":1582015121184},{"_id":"themes/cactus/.DS_Store","hash":"4c868c6f4c11f7c3141bd5c80a4f38299790a1b2","modified":1581854388725},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1581411848434},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1581411848434},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1581411848434},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1581411848434},{"_id":"themes/cactus/README.md","hash":"6c9fa47fe715c6262c6613ff1ce1a0ad553e585f","modified":1581411848434},{"_id":"themes/cactus/_config.yml","hash":"d0ea36a7e2cbcf10e71dd8b9ff886e8e13a5eae4","modified":1582015910281},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1581411848435},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1581411848441},{"_id":"source/_posts/.DS_Store","hash":"1c8aed50bb409a93a5a194547538268a5e8c8b00","modified":1582015561983},{"_id":"source/_posts/k-means.md","hash":"8829e028a970c9e869a6be9c13f7c73b16dc51c7","modified":1581841325077},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1581411000154},{"_id":"source/_posts/lc91-Decode-ways-dp-iq-crush-notes.md","hash":"e43a5387bc777ecfc57f2f8a76b17ef49c910497","modified":1581840183602},{"_id":"source/_posts/quick-sort-three-ways.md","hash":"a5b81d03ab6abdbc1f4e7a9c8c5582b4c1db023d","modified":1581841618940},{"_id":"source/_posts/test-post.md","hash":"5a63759d060648a6dc22fc01660abce71fff5e56","modified":1581464351876},{"_id":"source/_posts/variational-autoencoder.md","hash":"60012886bbfcf082f340ac21f3465a2fbc9cd89a","modified":1581841608733},{"_id":"source/projects/index.md","hash":"688935ba49dcdd17210d9bf92dc81db719e11151","modified":1581412692968},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1581464934339},{"_id":"source/about/index.md","hash":"d3e78503151ce589992317563d85d06bcd679fa9","modified":1581468653915},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1581411848435},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1581411848435},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1581411848435},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1581411848435},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1581411848435},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1581411848436},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1581411848436},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1581411848436},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1581411848436},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1581411848436},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1581411848436},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1581411848436},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1581411848437},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1581411848437},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1581411848437},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1581411848437},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1581411848437},{"_id":"themes/cactus/layout/.DS_Store","hash":"8e9fc876db39e7614523ec5431d6c526e6e59a88","modified":1581854395468},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1581411848440},{"_id":"themes/cactus/layout/index.ejs","hash":"1fd8aad25b2893a26b4483b91a341907e55c16be","modified":1581411848440},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1581411848441},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1581411848441},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1582012369812},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1581411848441},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1581411848442},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1581411848442},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1581411848442},{"_id":"themes/cactus/source/.DS_Store","hash":"1276ace1ecbdb264d3b1ea562da65eaf624d43d7","modified":1581468753083},{"_id":"themes/cactus/layout/_partial/.DS_Store","hash":"fd6f4f17c0acd589ce3b3a3d4509c7a8ce7e8389","modified":1581854395467},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"a9b51258a4c55cdae6c892ac7534d7ef5e6eceb4","modified":1582012372451},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1581411848437},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1581411848438},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1581411848438},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1581411848438},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"18b9f77b9429722b54162add341e4d0b3de6a62a","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1581411848440},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1581411848440},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1581411848443},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1581411848443},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1581411848459},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1581411848462},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1581411848463},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1581411848463},{"_id":"themes/cactus/source/css/style.styl","hash":"18b22cfdc7457d81db7694aef5850cc36ff87a77","modified":1581411848463},{"_id":"themes/cactus/source/images/.DS_Store","hash":"e5afe5bf2bc1121b747dc420b31df88e1dac5bad","modified":1581471633897},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1581411848463},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1581411848464},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1581411848464},{"_id":"themes/cactus/source/images/huaicon_black.png","hash":"9154e61fd3536afc10b666763b0634c9677302a5","modified":1581467716953},{"_id":"themes/cactus/source/images/huaicon_car.png","hash":"b0c41394254c1277e12423052a975f10910c836b","modified":1577488197703},{"_id":"themes/cactus/source/images/huaicon_white.png","hash":"3d9b0f0cbf3877b25cb4dfdf9a8423f19b28820a","modified":1581467852947},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1581411848467},{"_id":"themes/cactus/source/js/search.js","hash":"62df6eeb66e002a600317a288e3f8fcd0e9c5492","modified":1581411848467},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1581411848438},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1581411848439},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1581411848439},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1581411848442},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1581411848443},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1581411848443},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1581411848443},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1581411848443},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1581411848444},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1581411848444},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1581411848444},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1581411848444},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1581411848444},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1581411848445},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1581411848445},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1581411848445},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1581411848445},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1581411848445},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1581411848446},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1581411848446},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1581411848446},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1581411848446},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1581411848447},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1581411848447},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1581411848447},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1581411848447},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1581411848448},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1581411848448},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1581411848448},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1581411848448},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1581411848448},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1581411848449},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1581411848449},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1581411848449},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1581411848449},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1581411848450},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1581411848450},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1581411848451},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1581411848451},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1581411848451},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1581411848451},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1581411848451},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1581411848451},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1581411848452},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1581411848452},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1581411848452},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1581411848452},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1581411848452},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1581411848453},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1581411848454},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1581411848454},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1581411848454},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1581411848454},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1581411848455},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1581411848455},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1581411848455},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1581411848455},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1581411848455},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1581411848456},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1581411848456},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1581411848456},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1581411848456},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1581411848456},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1581411848457},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1581411848457},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1581411848457},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1581411848457},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1581411848457},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1581411848458},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1581411848458},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1581411848458},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1581411848458},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1581411848459},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1581411848459},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1581411848459},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1581411848459},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1581411848460},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1581411848460},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1581411848460},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"519af79eb34ee922b48e6c19aa8f4856e3f76486","modified":1581411848460},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1581411848461},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1581411848461},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1581411848462},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1581411848462},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1581411848462},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1581411848468},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1581411848530},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1581411848530},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1581411848533},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1581411848533},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1581411848537},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1581411848537},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1581411848540},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1581411848540},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1581411848543},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1581411848544},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1581411848546},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1581411848547},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1581411848547},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1581411848466},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1581411848498},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1581411848527},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1581411848529},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1581411848531},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1581411848532},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1581411848535},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1581411848536},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1581411848538},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1581411848539},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1581411848541},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1581411848542},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1581411848545},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1581411848546},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1581411848461},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1581411848461},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1581411848480},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1581411848482},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1581411848482},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1581411848481},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1581411848498},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1581411848499},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1581411848469},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1581411848478},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1581411848479},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1581411848496},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1581411848471},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1581411848496},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1581411848478},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1581411848484},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1581411848481},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1581411848495},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1581411848518},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1581411848519},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1581411848523},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1581411848524},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1581411848510},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1581411848513},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1581411848522},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1581411848515},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1581411848516},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1581411848520},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1581411848525},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1581411848508},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1581411848476},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1581411848489},{"_id":"public/projects/index.html","hash":"17fd3fbe9eea1805e96a605de5f15b0b75f0f6ce","modified":1582015932571},{"_id":"public/about/index.html","hash":"d4752ebd42d0f5f2a0039c192723e468ac401d82","modified":1582015932571},{"_id":"public/2020/02/11/test-post/index.html","hash":"6eeb2111d8e01e4b50922959a9a017508c588c43","modified":1582015932571},{"_id":"public/archives/index.html","hash":"480722053ad253236750c46c77a954bb9b68372f","modified":1582015964270},{"_id":"public/archives/2020/index.html","hash":"4e2999a568c4f84d4b650908e5ef2d2410ec973c","modified":1582015964270},{"_id":"public/archives/2020/02/index.html","hash":"fd0757cd38d65cd23784c76409e5aa28219e77ed","modified":1582015964270},{"_id":"public/2020/02/16/k-means/index.html","hash":"347f8486b56ea5663df5e6164d0bfec1402ff190","modified":1582015964270},{"_id":"public/2020/02/16/variational-autoencoder/index.html","hash":"0820b64999fdb8616d4ba13945d10250a0d0678c","modified":1582015932571},{"_id":"public/2020/02/11/hello-world/index.html","hash":"0c957bf36fb042f9e656034681cbed566449ebfe","modified":1582015932571},{"_id":"public/2020/02/15/lc91-Decode-ways-dp-iq-crush-notes/index.html","hash":"26495b56a12a02e7bdde17b061afd3eb0629227d","modified":1582015932571},{"_id":"public/2020/02/16/quick-sort-three-ways/index.html","hash":"6c9fd16c7db90bafd441ef80269021dcb6392d54","modified":1582015932571},{"_id":"public/tags/Deeplearning/index.html","hash":"48c1b57d7db5b6bb670c22bf4ff781640188ed59","modified":1582015932571},{"_id":"public/index.html","hash":"99ce03f2e8de2114593c8413cc322882a3bbd03c","modified":1582015964270},{"_id":"public/tags/leetcode-DynamicProgrammming/index.html","hash":"5729d2096d21c922a85643d978c634be26b84916","modified":1582015932571},{"_id":"public/tags/Machinelearning/index.html","hash":"5faa71e58da3a127352ee570722bf439e4332f42","modified":1582015932571},{"_id":"public/images/huaicon_black.png","hash":"9154e61fd3536afc10b666763b0634c9677302a5","modified":1582015932571},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1582015932571},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1582015932571},{"_id":"public/images/huaicon_car.png","hash":"b0c41394254c1277e12423052a975f10910c836b","modified":1582015932571},{"_id":"public/images/huaicon_white.png","hash":"3d9b0f0cbf3877b25cb4dfdf9a8423f19b28820a","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1582015932571},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1582015932571},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1582015932571},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1582015932571},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1582015932571},{"_id":"public/js/search.js","hash":"62df6eeb66e002a600317a288e3f8fcd0e9c5492","modified":1582015932571},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1582015932571},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1582015932571},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1582015932571},{"_id":"public/css/style.css","hash":"d2518a07df74f8fdb7d392f676833bc379423a75","modified":1582015932571},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1582015932571},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1582015932571},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1582015932571},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1582015932571},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1582015932571},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1582015932571},{"_id":"source/_posts/test.md","hash":"b344e9319163dc46f9dcabcb791adac1a02c34e3","modified":1582015954466},{"_id":"public/2020/02/18/test/index.html","hash":"fdee05d9b62d641d1bcb3451a2c4a8430c75401a","modified":1582015964270}],"Category":[],"Data":[],"Page":[{"title":"projects","date":"2020-02-11T09:18:12.000Z","_content":"","source":"projects/index.md","raw":"---\ntitle: projects\ndate: 2020-02-11 01:18:12\n---\n","updated":"2020-02-11T09:18:12.968Z","path":"projects/index.html","comments":1,"layout":"page","_id":"ck6rnfu8h000cuwu01tieae40","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about me","date":"2020-02-11T09:13:16.000Z","_content":"\n## Ruoqi Zhang\n\nruoqizh@gmail.com\n\n<img src=\"https://scontent-lax3-1.xx.fbcdn.net/v/t1.0-9/49164654_2231544340502807_4326257640284880896_o.jpg?_nc_cat=102&amp;_nc_oc=AQmagaa17ZCUKMDzpMQMTr6LI_yZh7K2nXruQ06tts-QtaLFzY9kwyCiWEXauZUU0TwSUFl6pEYs8lomlvRWLFGF&amp;_nc_ht=scontent-lax3-1.xx&amp;oh=8e62473866cfd94251f6181ecad5e4a8&amp;oe=5EBC69A2\" alt=\"My Photo\" style=\"zoom:10%;\" />\n\nI am a Master's student at University of California San Diego, majoring in Machine learning and data science. Graduating in 2020, looking for software engineer position. \n\n### Work Experience\n\n**Nullmax** (2019.06 - 2019.09, Shanghai, China)\n\n***Machine learning engineer intern***\n\n> Responsible for the deep learning algorithm application and research.\n>\n> Responsible for a project achieving a visual solution for self-driving end to end control. To predict the steering command of the car on-road only depends on cameras and map images. Construct a variational network based on CNN as an ensemble model with a novel loss function. Show the end to end learning potential in a real-world application, and got a well and applicable result.\n>\n> Use OpenCV, OpenStreetMap, and Kalman Filter in the project, and be familiar with detective model such as YOLO.\n\n### Education\n\n**University of California, San Diego**  (2018.09 - 2020.03 San Diego, United States)\n\n***Master of Science***, Electrical and Computer Engineering Department, ***Machine learning and data science***\n\n\n\n\n\n**Tallinn University of Technology** (2017.09 - 2018.02 Tallinn, Estonia)\n\n***Exchange student***\n\n\n\n\n\n**Beijing Institute of Technology** (2014.09 - 2018.06 Beijing, China)\n\n***Bachelor's degree***, Mechanical and Vehicle Engineering Department, ***Mechanical Engineering***\n\n\n\n-----------\n\nUpdating...","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2020-02-11 01:13:16\n---\n\n## Ruoqi Zhang\n\nruoqizh@gmail.com\n\n<img src=\"https://scontent-lax3-1.xx.fbcdn.net/v/t1.0-9/49164654_2231544340502807_4326257640284880896_o.jpg?_nc_cat=102&amp;_nc_oc=AQmagaa17ZCUKMDzpMQMTr6LI_yZh7K2nXruQ06tts-QtaLFzY9kwyCiWEXauZUU0TwSUFl6pEYs8lomlvRWLFGF&amp;_nc_ht=scontent-lax3-1.xx&amp;oh=8e62473866cfd94251f6181ecad5e4a8&amp;oe=5EBC69A2\" alt=\"My Photo\" style=\"zoom:10%;\" />\n\nI am a Master's student at University of California San Diego, majoring in Machine learning and data science. Graduating in 2020, looking for software engineer position. \n\n### Work Experience\n\n**Nullmax** (2019.06 - 2019.09, Shanghai, China)\n\n***Machine learning engineer intern***\n\n> Responsible for the deep learning algorithm application and research.\n>\n> Responsible for a project achieving a visual solution for self-driving end to end control. To predict the steering command of the car on-road only depends on cameras and map images. Construct a variational network based on CNN as an ensemble model with a novel loss function. Show the end to end learning potential in a real-world application, and got a well and applicable result.\n>\n> Use OpenCV, OpenStreetMap, and Kalman Filter in the project, and be familiar with detective model such as YOLO.\n\n### Education\n\n**University of California, San Diego**  (2018.09 - 2020.03 San Diego, United States)\n\n***Master of Science***, Electrical and Computer Engineering Department, ***Machine learning and data science***\n\n\n\n\n\n**Tallinn University of Technology** (2017.09 - 2018.02 Tallinn, Estonia)\n\n***Exchange student***\n\n\n\n\n\n**Beijing Institute of Technology** (2014.09 - 2018.06 Beijing, China)\n\n***Bachelor's degree***, Mechanical and Vehicle Engineering Department, ***Mechanical Engineering***\n\n\n\n-----------\n\nUpdating...","updated":"2020-02-12T00:50:53.915Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck6rnfu8i000duwu05mq946es","content":"<h2 id=\"Ruoqi-Zhang\"><a href=\"#Ruoqi-Zhang\" class=\"headerlink\" title=\"Ruoqi Zhang\"></a>Ruoqi Zhang</h2><p><a href=\"mailto:ruoqizh@gmail.com\">ruoqizh@gmail.com</a></p>\n<img src=\"https://scontent-lax3-1.xx.fbcdn.net/v/t1.0-9/49164654_2231544340502807_4326257640284880896_o.jpg?_nc_cat=102&amp;_nc_oc=AQmagaa17ZCUKMDzpMQMTr6LI_yZh7K2nXruQ06tts-QtaLFzY9kwyCiWEXauZUU0TwSUFl6pEYs8lomlvRWLFGF&amp;_nc_ht=scontent-lax3-1.xx&amp;oh=8e62473866cfd94251f6181ecad5e4a8&amp;oe=5EBC69A2\" alt=\"My Photo\" style=\"zoom:10%;\" />\n\n<p>I am a Master’s student at University of California San Diego, majoring in Machine learning and data science. Graduating in 2020, looking for software engineer position. </p>\n<h3 id=\"Work-Experience\"><a href=\"#Work-Experience\" class=\"headerlink\" title=\"Work Experience\"></a>Work Experience</h3><p><strong>Nullmax</strong> (2019.06 - 2019.09, Shanghai, China)</p>\n<p><strong><em>Machine learning engineer intern</em></strong></p>\n<blockquote>\n<p>Responsible for the deep learning algorithm application and research.</p>\n<p>Responsible for a project achieving a visual solution for self-driving end to end control. To predict the steering command of the car on-road only depends on cameras and map images. Construct a variational network based on CNN as an ensemble model with a novel loss function. Show the end to end learning potential in a real-world application, and got a well and applicable result.</p>\n<p>Use OpenCV, OpenStreetMap, and Kalman Filter in the project, and be familiar with detective model such as YOLO.</p>\n</blockquote>\n<h3 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h3><p><strong>University of California, San Diego</strong>  (2018.09 - 2020.03 San Diego, United States)</p>\n<p><strong><em>Master of Science</em></strong>, Electrical and Computer Engineering Department, <strong><em>Machine learning and data science</em></strong></p>\n<p><strong>Tallinn University of Technology</strong> (2017.09 - 2018.02 Tallinn, Estonia)</p>\n<p><strong><em>Exchange student</em></strong></p>\n<p><strong>Beijing Institute of Technology</strong> (2014.09 - 2018.06 Beijing, China)</p>\n<p><strong><em>Bachelor’s degree</em></strong>, Mechanical and Vehicle Engineering Department, <strong><em>Mechanical Engineering</em></strong></p>\n<hr>\n<p>Updating…</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ruoqi-Zhang\"><a href=\"#Ruoqi-Zhang\" class=\"headerlink\" title=\"Ruoqi Zhang\"></a>Ruoqi Zhang</h2><p><a href=\"mailto:ruoqizh@gmail.com\">ruoqizh@gmail.com</a></p>\n<img src=\"https://scontent-lax3-1.xx.fbcdn.net/v/t1.0-9/49164654_2231544340502807_4326257640284880896_o.jpg?_nc_cat=102&amp;_nc_oc=AQmagaa17ZCUKMDzpMQMTr6LI_yZh7K2nXruQ06tts-QtaLFzY9kwyCiWEXauZUU0TwSUFl6pEYs8lomlvRWLFGF&amp;_nc_ht=scontent-lax3-1.xx&amp;oh=8e62473866cfd94251f6181ecad5e4a8&amp;oe=5EBC69A2\" alt=\"My Photo\" style=\"zoom:10%;\" />\n\n<p>I am a Master’s student at University of California San Diego, majoring in Machine learning and data science. Graduating in 2020, looking for software engineer position. </p>\n<h3 id=\"Work-Experience\"><a href=\"#Work-Experience\" class=\"headerlink\" title=\"Work Experience\"></a>Work Experience</h3><p><strong>Nullmax</strong> (2019.06 - 2019.09, Shanghai, China)</p>\n<p><strong><em>Machine learning engineer intern</em></strong></p>\n<blockquote>\n<p>Responsible for the deep learning algorithm application and research.</p>\n<p>Responsible for a project achieving a visual solution for self-driving end to end control. To predict the steering command of the car on-road only depends on cameras and map images. Construct a variational network based on CNN as an ensemble model with a novel loss function. Show the end to end learning potential in a real-world application, and got a well and applicable result.</p>\n<p>Use OpenCV, OpenStreetMap, and Kalman Filter in the project, and be familiar with detective model such as YOLO.</p>\n</blockquote>\n<h3 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h3><p><strong>University of California, San Diego</strong>  (2018.09 - 2020.03 San Diego, United States)</p>\n<p><strong><em>Master of Science</em></strong>, Electrical and Computer Engineering Department, <strong><em>Machine learning and data science</em></strong></p>\n<p><strong>Tallinn University of Technology</strong> (2017.09 - 2018.02 Tallinn, Estonia)</p>\n<p><strong><em>Exchange student</em></strong></p>\n<p><strong>Beijing Institute of Technology</strong> (2014.09 - 2018.06 Beijing, China)</p>\n<p><strong><em>Bachelor’s degree</em></strong>, Mechanical and Vehicle Engineering Department, <strong><em>Mechanical Engineering</em></strong></p>\n<hr>\n<p>Updating…</p>\n"}],"Post":[{"title":"k-means","date":"2020-02-16T08:18:05.000Z","_content":"\nThe main code part\n\n```python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\nclass kmeans:\n    def __init__(self, data, k):\n        self.x = data\n        self.k = k\n        self.y = self.forward(self.x, self.k)\n\n    def distance(self, p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def rand_cent(self, data, k):\n        n, dim = data.shape\n        cent = np.zeros((k, dim))\n        for i in range(k):\n            cent[i,:] = data[random.randint(0, n),:]\n        return cent\n\n    def forward(self, data, k):\n        n, dim = data.shape\n        cent = self.rand_cent(data, k)\n        y = np.zeros(n)\n        dis = np.zeros(k)\n        clu = dict()\n        for j in range(k):\n            clu[j] = [cent[j,:]]\n        for i in range(n):\n            for j in range(k):\n                dis[j] = self.distance(cent[j,:], data[i,:])\n            c = np.argmin(dis)\n            clu[c].append(data[i,:])\n            cent[c,:] = np.mean(np.array(clu[c]))\n            y[i] = c\n        return y\n\n    def res(self):\n        return self.y\n```\n\nTest on the iris dataset\n```python\n\nfrom sklearn import datasets\niris = datasets.load_iris()\nX, y = iris.data, iris.target\ndata = X[:,[0,2]]\ndata = X[:,[1,2]]\nplt.scatter(data[:,0],data[:,1])\n\n```\n![0001.png](https://upload-images.jianshu.io/upload_images/18864424-d79a75bdf6d70076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n```python\nk = 4\n#k is the number of cluster\nkm = kmeans(data, k)\ny_p=km.res()\n\nfor i in range(k):\n    y0 = list(np.argwhere(y_p==i).reshape(1,-1)[0])\n    plt.scatter(data[y0,0],data[y0,1])\n```\n![0002.png](https://upload-images.jianshu.io/upload_images/18864424-f17935d7eb574948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/k-means.md","raw":"---\ntitle: k-means\ndate: 2020-02-16 00:18:05\ntags: Machinelearning\n---\n\nThe main code part\n\n```python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\nclass kmeans:\n    def __init__(self, data, k):\n        self.x = data\n        self.k = k\n        self.y = self.forward(self.x, self.k)\n\n    def distance(self, p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def rand_cent(self, data, k):\n        n, dim = data.shape\n        cent = np.zeros((k, dim))\n        for i in range(k):\n            cent[i,:] = data[random.randint(0, n),:]\n        return cent\n\n    def forward(self, data, k):\n        n, dim = data.shape\n        cent = self.rand_cent(data, k)\n        y = np.zeros(n)\n        dis = np.zeros(k)\n        clu = dict()\n        for j in range(k):\n            clu[j] = [cent[j,:]]\n        for i in range(n):\n            for j in range(k):\n                dis[j] = self.distance(cent[j,:], data[i,:])\n            c = np.argmin(dis)\n            clu[c].append(data[i,:])\n            cent[c,:] = np.mean(np.array(clu[c]))\n            y[i] = c\n        return y\n\n    def res(self):\n        return self.y\n```\n\nTest on the iris dataset\n```python\n\nfrom sklearn import datasets\niris = datasets.load_iris()\nX, y = iris.data, iris.target\ndata = X[:,[0,2]]\ndata = X[:,[1,2]]\nplt.scatter(data[:,0],data[:,1])\n\n```\n![0001.png](https://upload-images.jianshu.io/upload_images/18864424-d79a75bdf6d70076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n```python\nk = 4\n#k is the number of cluster\nkm = kmeans(data, k)\ny_p=km.res()\n\nfor i in range(k):\n    y0 = list(np.argwhere(y_p==i).reshape(1,-1)[0])\n    plt.scatter(data[y0,0],data[y0,1])\n```\n![0002.png](https://upload-images.jianshu.io/upload_images/18864424-f17935d7eb574948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"k-means","published":1,"updated":"2020-02-16T08:22:05.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rnfu7k0000uwu0gttm7tlb","content":"<p>The main code part</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">kmeans</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, k)</span>:</span></span><br><span class=\"line\">        self.x = data</span><br><span class=\"line\">        self.k = k</span><br><span class=\"line\">        self.y = self.forward(self.x, self.k)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distance</span><span class=\"params\">(self, p1, p2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.sqrt(np.sum((p1 - p2) ** <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rand_cent</span><span class=\"params\">(self, data, k)</span>:</span></span><br><span class=\"line\">        n, dim = data.shape</span><br><span class=\"line\">        cent = np.zeros((k, dim))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">            cent[i,:] = data[random.randint(<span class=\"number\">0</span>, n),:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, data, k)</span>:</span></span><br><span class=\"line\">        n, dim = data.shape</span><br><span class=\"line\">        cent = self.rand_cent(data, k)</span><br><span class=\"line\">        y = np.zeros(n)</span><br><span class=\"line\">        dis = np.zeros(k)</span><br><span class=\"line\">        clu = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">            clu[j] = [cent[j,:]]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">                dis[j] = self.distance(cent[j,:], data[i,:])</span><br><span class=\"line\">            c = np.argmin(dis)</span><br><span class=\"line\">            clu[c].append(data[i,:])</span><br><span class=\"line\">            cent[c,:] = np.mean(np.array(clu[c]))</span><br><span class=\"line\">            y[i] = c</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">res</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.y</span><br></pre></td></tr></table></figure>\n\n<p>Test on the iris dataset</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\">X, y = iris.data, iris.target</span><br><span class=\"line\">data = X[:,[<span class=\"number\">0</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">data = X[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">plt.scatter(data[:,<span class=\"number\">0</span>],data[:,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-d79a75bdf6d70076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"0001.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\">#k is the number of cluster</span></span><br><span class=\"line\">km = kmeans(data, k)</span><br><span class=\"line\">y_p=km.res()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">    y0 = list(np.argwhere(y_p==i).reshape(<span class=\"number\">1</span>,<span class=\"number\">-1</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">    plt.scatter(data[y0,<span class=\"number\">0</span>],data[y0,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-f17935d7eb574948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"0002.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>The main code part</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">kmeans</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, k)</span>:</span></span><br><span class=\"line\">        self.x = data</span><br><span class=\"line\">        self.k = k</span><br><span class=\"line\">        self.y = self.forward(self.x, self.k)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distance</span><span class=\"params\">(self, p1, p2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.sqrt(np.sum((p1 - p2) ** <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rand_cent</span><span class=\"params\">(self, data, k)</span>:</span></span><br><span class=\"line\">        n, dim = data.shape</span><br><span class=\"line\">        cent = np.zeros((k, dim))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">            cent[i,:] = data[random.randint(<span class=\"number\">0</span>, n),:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, data, k)</span>:</span></span><br><span class=\"line\">        n, dim = data.shape</span><br><span class=\"line\">        cent = self.rand_cent(data, k)</span><br><span class=\"line\">        y = np.zeros(n)</span><br><span class=\"line\">        dis = np.zeros(k)</span><br><span class=\"line\">        clu = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">            clu[j] = [cent[j,:]]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">                dis[j] = self.distance(cent[j,:], data[i,:])</span><br><span class=\"line\">            c = np.argmin(dis)</span><br><span class=\"line\">            clu[c].append(data[i,:])</span><br><span class=\"line\">            cent[c,:] = np.mean(np.array(clu[c]))</span><br><span class=\"line\">            y[i] = c</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">res</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.y</span><br></pre></td></tr></table></figure>\n\n<p>Test on the iris dataset</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\">X, y = iris.data, iris.target</span><br><span class=\"line\">data = X[:,[<span class=\"number\">0</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">data = X[:,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">plt.scatter(data[:,<span class=\"number\">0</span>],data[:,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-d79a75bdf6d70076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"0001.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\">#k is the number of cluster</span></span><br><span class=\"line\">km = kmeans(data, k)</span><br><span class=\"line\">y_p=km.res()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">    y0 = list(np.argwhere(y_p==i).reshape(<span class=\"number\">1</span>,<span class=\"number\">-1</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">    plt.scatter(data[y0,<span class=\"number\">0</span>],data[y0,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-f17935d7eb574948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"0002.png\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-02-11T08:50:00.154Z","updated":"2020-02-11T08:50:00.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rnfu7o0001uwu05fob5eun","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"lc91_Decode_ways-dp-iq_crush_notes","date":"2020-02-16T07:29:45.000Z","_content":"\nProblem: https://leetcode.com/problems/decode-ways/\n\nSolution: https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming\n\nThe problem can be abstract into two basic situations: 2-int as 1 number; 2 in as 2 numbers.\n\nLet dp[i] be the possible decode ways to string s[:i - 1]. Make sure len(dp) = len(s) + 1 and dp[0] = 1, in case the tricky corner case like \"10\".\n\nSo if s[i - 1] != \"0\", dp[i] would be 0 + dp[i - 1], as a single number for decoding.\n\nThen if s[i - 2:i] is a valid code in range of (1, 26), s[i - 1] can be treat as the other way to decode together with s[i - 2]. Thus, dp[i] should add the decode ways of dp[i - 2]. dp[i - 2] and dp[i - 1] are not overlapped.\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        if s[0] == \"0\":\n            return 0\n        n = len(s)\n        dp = [0 for _ in range(n + 1)]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            if s[i-2:i] == \"00\" or (s[i - 1] == \"0\" and int(s[i-2:i]) > 26):\n                return 0\n            if s[i - 1] != \"0\":\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]\n```\n\n\n\nThere is another solution come to my mind before, which is using dfs.\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        return self._dfs(s, 0)\n    \n    def _dfs(self, rest, ans):\n        if not rest:\n            return ans + 1\n        for i in range(1, min(3, len(rest) + 1)):\n            if rest[:i][0] == \"0\":\n                continue\n            if rest[:i] and int(rest[:i]) > 0 and int(rest[:i]) <= 26:\n                ans = self._dfs(rest[i:], ans)\n        return ans\n```\n\nThis dfs solution can perfectly avoid the corner cases by searching all possible 1-2 integers as the solution.\n\nHowever, the time complexity is \n\n<img src=\"http://chart.googleapis.com/chart?cht=tx&chl= O(\\sum^{n}_{k = 1}2^k)\" style=\"border:none;\">\n\nwhich is much higher than dp solution O(n).\n\nSpace complexity is O(n) both in bfs and dp.","source":"_posts/lc91-Decode-ways-dp-iq-crush-notes.md","raw":"---\ntitle: lc91_Decode_ways-dp-iq_crush_notes\ndate: 2020-02-15 23:29:45\ntags: leetcode DynamicProgrammming\n\n---\n\nProblem: https://leetcode.com/problems/decode-ways/\n\nSolution: https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming\n\nThe problem can be abstract into two basic situations: 2-int as 1 number; 2 in as 2 numbers.\n\nLet dp[i] be the possible decode ways to string s[:i - 1]. Make sure len(dp) = len(s) + 1 and dp[0] = 1, in case the tricky corner case like \"10\".\n\nSo if s[i - 1] != \"0\", dp[i] would be 0 + dp[i - 1], as a single number for decoding.\n\nThen if s[i - 2:i] is a valid code in range of (1, 26), s[i - 1] can be treat as the other way to decode together with s[i - 2]. Thus, dp[i] should add the decode ways of dp[i - 2]. dp[i - 2] and dp[i - 1] are not overlapped.\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        if s[0] == \"0\":\n            return 0\n        n = len(s)\n        dp = [0 for _ in range(n + 1)]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            if s[i-2:i] == \"00\" or (s[i - 1] == \"0\" and int(s[i-2:i]) > 26):\n                return 0\n            if s[i - 1] != \"0\":\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]\n```\n\n\n\nThere is another solution come to my mind before, which is using dfs.\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        return self._dfs(s, 0)\n    \n    def _dfs(self, rest, ans):\n        if not rest:\n            return ans + 1\n        for i in range(1, min(3, len(rest) + 1)):\n            if rest[:i][0] == \"0\":\n                continue\n            if rest[:i] and int(rest[:i]) > 0 and int(rest[:i]) <= 26:\n                ans = self._dfs(rest[i:], ans)\n        return ans\n```\n\nThis dfs solution can perfectly avoid the corner cases by searching all possible 1-2 integers as the solution.\n\nHowever, the time complexity is \n\n<img src=\"http://chart.googleapis.com/chart?cht=tx&chl= O(\\sum^{n}_{k = 1}2^k)\" style=\"border:none;\">\n\nwhich is much higher than dp solution O(n).\n\nSpace complexity is O(n) both in bfs and dp.","slug":"lc91-Decode-ways-dp-iq-crush-notes","published":1,"updated":"2020-02-16T08:03:03.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rnfu7q0003uwu090nt28yh","content":"<p>Problem: <a href=\"https://leetcode.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/decode-ways/</a></p>\n<p>Solution: <a href=\"https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming</a></p>\n<p>The problem can be abstract into two basic situations: 2-int as 1 number; 2 in as 2 numbers.</p>\n<p>Let dp[i] be the possible decode ways to string s[:i - 1]. Make sure len(dp) = len(s) + 1 and dp[0] = 1, in case the tricky corner case like “10”.</p>\n<p>So if s[i - 1] != “0”, dp[i] would be 0 + dp[i - 1], as a single number for decoding.</p>\n<p>Then if s[i - 2:i] is a valid code in range of (1, 26), s[i - 1] can be treat as the other way to decode together with s[i - 2]. Thus, dp[i] should add the decode ways of dp[i - 2]. dp[i - 2] and dp[i - 1] are not overlapped.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numDecodings</span><span class=\"params\">(self, s: str)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[<span class=\"number\">0</span>] == <span class=\"string\">\"0\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        n = len(s)</span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i<span class=\"number\">-2</span>:i] == <span class=\"string\">\"00\"</span> <span class=\"keyword\">or</span> (s[i - <span class=\"number\">1</span>] == <span class=\"string\">\"0\"</span> <span class=\"keyword\">and</span> int(s[i<span class=\"number\">-2</span>:i]) &gt; <span class=\"number\">26</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i - <span class=\"number\">1</span>] != <span class=\"string\">\"0\"</span>:</span><br><span class=\"line\">                dp[i] += dp[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">10</span> &lt;= int(s[i<span class=\"number\">-2</span>:i]) &lt;= <span class=\"number\">26</span>:</span><br><span class=\"line\">                dp[i] += dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>There is another solution come to my mind before, which is using dfs.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numDecodings</span><span class=\"params\">(self, s: str)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._dfs(s, <span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_dfs</span><span class=\"params\">(self, rest, ans)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> rest:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, min(<span class=\"number\">3</span>, len(rest) + <span class=\"number\">1</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rest[:i][<span class=\"number\">0</span>] == <span class=\"string\">\"0\"</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rest[:i] <span class=\"keyword\">and</span> int(rest[:i]) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> int(rest[:i]) &lt;= <span class=\"number\">26</span>:</span><br><span class=\"line\">                ans = self._dfs(rest[i:], ans)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n\n<p>This dfs solution can perfectly avoid the corner cases by searching all possible 1-2 integers as the solution.</p>\n<p>However, the time complexity is </p>\n<img src=\"http://chart.googleapis.com/chart?cht=tx&chl= O(\\sum^{n}_{k = 1}2^k)\" style=\"border:none;\">\n\n<p>which is much higher than dp solution O(n).</p>\n<p>Space complexity is O(n) both in bfs and dp.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Problem: <a href=\"https://leetcode.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/decode-ways/</a></p>\n<p>Solution: <a href=\"https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming</a></p>\n<p>The problem can be abstract into two basic situations: 2-int as 1 number; 2 in as 2 numbers.</p>\n<p>Let dp[i] be the possible decode ways to string s[:i - 1]. Make sure len(dp) = len(s) + 1 and dp[0] = 1, in case the tricky corner case like “10”.</p>\n<p>So if s[i - 1] != “0”, dp[i] would be 0 + dp[i - 1], as a single number for decoding.</p>\n<p>Then if s[i - 2:i] is a valid code in range of (1, 26), s[i - 1] can be treat as the other way to decode together with s[i - 2]. Thus, dp[i] should add the decode ways of dp[i - 2]. dp[i - 2] and dp[i - 1] are not overlapped.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numDecodings</span><span class=\"params\">(self, s: str)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[<span class=\"number\">0</span>] == <span class=\"string\">\"0\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        n = len(s)</span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i<span class=\"number\">-2</span>:i] == <span class=\"string\">\"00\"</span> <span class=\"keyword\">or</span> (s[i - <span class=\"number\">1</span>] == <span class=\"string\">\"0\"</span> <span class=\"keyword\">and</span> int(s[i<span class=\"number\">-2</span>:i]) &gt; <span class=\"number\">26</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i - <span class=\"number\">1</span>] != <span class=\"string\">\"0\"</span>:</span><br><span class=\"line\">                dp[i] += dp[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">10</span> &lt;= int(s[i<span class=\"number\">-2</span>:i]) &lt;= <span class=\"number\">26</span>:</span><br><span class=\"line\">                dp[i] += dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>There is another solution come to my mind before, which is using dfs.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numDecodings</span><span class=\"params\">(self, s: str)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._dfs(s, <span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_dfs</span><span class=\"params\">(self, rest, ans)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> rest:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, min(<span class=\"number\">3</span>, len(rest) + <span class=\"number\">1</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rest[:i][<span class=\"number\">0</span>] == <span class=\"string\">\"0\"</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rest[:i] <span class=\"keyword\">and</span> int(rest[:i]) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> int(rest[:i]) &lt;= <span class=\"number\">26</span>:</span><br><span class=\"line\">                ans = self._dfs(rest[i:], ans)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n\n<p>This dfs solution can perfectly avoid the corner cases by searching all possible 1-2 integers as the solution.</p>\n<p>However, the time complexity is </p>\n<img src=\"http://chart.googleapis.com/chart?cht=tx&chl= O(\\sum^{n}_{k = 1}2^k)\" style=\"border:none;\">\n\n<p>which is much higher than dp solution O(n).</p>\n<p>Space complexity is O(n) both in bfs and dp.</p>\n"},{"title":"test_post","date":"2020-02-11T23:37:46.000Z","_content":"\nTest for empty","source":"_posts/test-post.md","raw":"---\ntitle: test_post\ndate: 2020-02-11 15:37:46\ntags:\n---\n\nTest for empty","slug":"test-post","published":1,"updated":"2020-02-11T23:39:11.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rnfu7r0004uwu0338f7fbw","content":"<p>Test for empty</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Test for empty</p>\n"},{"title":"quick_sort_three_ways","date":"2020-02-16T08:15:58.000Z","Tags":"Algorithms","_content":"\nInspired by [this blog](https://blog.csdn.net/razor87/article/details/71155518), I achieved several ways to build the quick_sort function.\nBasic way:\nMy version use right as pivot\n```python\ndef quick_sort(array, left, right):\n    if left >= right:\n        return\n    head = left\n    end = right\n    key = array[end]\n    while left < right:\n        while left < right and array[left] < key:\n            left += 1\n        array[right] = array[left]\n        while left < right and array[right] >= key:\n            right -= 1\n        array[left] = array[right]\n    array[left] = key\n    print(array, key)\n    quick_sort(array, head, left - 1)\n    quick_sort(array, right + 1, end)\n```\n\nThe version in the blog which use left as pivot.\n``` Python\ndef quick_sort(array, left, right):\n    if left >= right:\n        return\n    low = left\n    high = right\n    key = array[low]\n    while left < right:\n        while left < right and array[right] > key:\n            right -= 1\n        array[left] = array[right]\n        while left < right and array[left] <= key:\n            left += 1\n        array[right] = array[left]\n    array[right] = key\n    quick_sort(array, low, left - 1)\n    quick_sort(array, left + 1, high)\n```\n```python\nTime O(logn)\nSpace O(1)\n```\n\nAnother way only uses one single loop:\nUse right as pivot\n```python\ndef quick_sort(array, left, right):\n    if left < right:\n        flag = partition(array, left, right)\n        quick_sort(array, left, flag - 1)\n        quick_sort(array, flag + 1, right)\n        \ndef partition(array, left, right):\n    pivot = array[right]\n    i = left - 1\n    for j in range(left, right):\n        if array[j] <= pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n    array[i + 1], array[right] = array[right], array[i + 1]   \n    return i + 1\n```\n\nUse left as pivot\n```Python\ndef quick_sort(array, left, right):\n    if left < right:\n        flag = partition(array, left, right)\n        quick_sort(array, left, flag - 1)\n        quick_sort(array, flag + 1, right)\n        \ndef partition(array, left, right):\n    pivot = array[left]\n    i = left\n    for j in range(left + 1, right + 1):\n        if array[j] < pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n    array[i], array[left] = array[left], array[i]  \n    return i\n```\n```python\nTime O(logn)\nSpace O(1)\n```\n\nWhat's different?\nUse the 'for' loop to substitute the 'while' loop.\nPut one pointer j into the loop, another i to record the first number greater than key. Exchange the position when j met the requirement, which makes sure the sort process to the key value.\n\n********Update*********\n```Python\ndef quick_sort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        smaller = [i for i in array[1:] if i < pivot]\n        greater = [j for j in array[1:] if j >= pivot]\n    return quick_sort(smaller) + [pivot] + quick_sort(greater)    \n```\nThis method seems much simpler. Howvere, it enhances the usage of memory. The time complexity is the same, but the space is O(logn)","source":"_posts/quick-sort-three-ways.md","raw":"---\ntitle: quick_sort_three_ways\ndate: 2020-02-16 00:15:58\nTags: Algorithms\n---\n\nInspired by [this blog](https://blog.csdn.net/razor87/article/details/71155518), I achieved several ways to build the quick_sort function.\nBasic way:\nMy version use right as pivot\n```python\ndef quick_sort(array, left, right):\n    if left >= right:\n        return\n    head = left\n    end = right\n    key = array[end]\n    while left < right:\n        while left < right and array[left] < key:\n            left += 1\n        array[right] = array[left]\n        while left < right and array[right] >= key:\n            right -= 1\n        array[left] = array[right]\n    array[left] = key\n    print(array, key)\n    quick_sort(array, head, left - 1)\n    quick_sort(array, right + 1, end)\n```\n\nThe version in the blog which use left as pivot.\n``` Python\ndef quick_sort(array, left, right):\n    if left >= right:\n        return\n    low = left\n    high = right\n    key = array[low]\n    while left < right:\n        while left < right and array[right] > key:\n            right -= 1\n        array[left] = array[right]\n        while left < right and array[left] <= key:\n            left += 1\n        array[right] = array[left]\n    array[right] = key\n    quick_sort(array, low, left - 1)\n    quick_sort(array, left + 1, high)\n```\n```python\nTime O(logn)\nSpace O(1)\n```\n\nAnother way only uses one single loop:\nUse right as pivot\n```python\ndef quick_sort(array, left, right):\n    if left < right:\n        flag = partition(array, left, right)\n        quick_sort(array, left, flag - 1)\n        quick_sort(array, flag + 1, right)\n        \ndef partition(array, left, right):\n    pivot = array[right]\n    i = left - 1\n    for j in range(left, right):\n        if array[j] <= pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n    array[i + 1], array[right] = array[right], array[i + 1]   \n    return i + 1\n```\n\nUse left as pivot\n```Python\ndef quick_sort(array, left, right):\n    if left < right:\n        flag = partition(array, left, right)\n        quick_sort(array, left, flag - 1)\n        quick_sort(array, flag + 1, right)\n        \ndef partition(array, left, right):\n    pivot = array[left]\n    i = left\n    for j in range(left + 1, right + 1):\n        if array[j] < pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n    array[i], array[left] = array[left], array[i]  \n    return i\n```\n```python\nTime O(logn)\nSpace O(1)\n```\n\nWhat's different?\nUse the 'for' loop to substitute the 'while' loop.\nPut one pointer j into the loop, another i to record the first number greater than key. Exchange the position when j met the requirement, which makes sure the sort process to the key value.\n\n********Update*********\n```Python\ndef quick_sort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        smaller = [i for i in array[1:] if i < pivot]\n        greater = [j for j in array[1:] if j >= pivot]\n    return quick_sort(smaller) + [pivot] + quick_sort(greater)    \n```\nThis method seems much simpler. Howvere, it enhances the usage of memory. The time complexity is the same, but the space is O(logn)","slug":"quick-sort-three-ways","published":1,"updated":"2020-02-16T08:26:58.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rnfu7r0005uwu0a09vcubb","content":"<p>Inspired by <a href=\"https://blog.csdn.net/razor87/article/details/71155518\" target=\"_blank\" rel=\"noopener\">this blog</a>, I achieved several ways to build the quick_sort function.<br>Basic way:<br>My version use right as pivot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    head = left</span><br><span class=\"line\">    end = right</span><br><span class=\"line\">    key = array[end]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[left] &lt; key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        array[right] = array[left]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[right] &gt;= key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        array[left] = array[right]</span><br><span class=\"line\">    array[left] = key</span><br><span class=\"line\">    print(array, key)</span><br><span class=\"line\">    quick_sort(array, head, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(array, right + <span class=\"number\">1</span>, end)</span><br></pre></td></tr></table></figure>\n\n<p>The version in the blog which use left as pivot.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    low = left</span><br><span class=\"line\">    high = right</span><br><span class=\"line\">    key = array[low]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[right] &gt; key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        array[left] = array[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[left] &lt;= key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        array[right] = array[left]</span><br><span class=\"line\">    array[right] = key</span><br><span class=\"line\">    quick_sort(array, low, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(array, left + <span class=\"number\">1</span>, high)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time O(logn)</span><br><span class=\"line\">Space O(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Another way only uses one single loop:<br>Use right as pivot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        flag = partition(array, left, right)</span><br><span class=\"line\">        quick_sort(array, left, flag - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(array, flag + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    pivot = array[right]</span><br><span class=\"line\">    i = left - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> array[j] &lt;= pivot:</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            array[i], array[j] = array[j], array[i]</span><br><span class=\"line\">    array[i + <span class=\"number\">1</span>], array[right] = array[right], array[i + <span class=\"number\">1</span>]   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>Use left as pivot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        flag = partition(array, left, right)</span><br><span class=\"line\">        quick_sort(array, left, flag - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(array, flag + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    pivot = array[left]</span><br><span class=\"line\">    i = left</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> array[j] &lt; pivot:</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            array[i], array[j] = array[j], array[i]</span><br><span class=\"line\">    array[i], array[left] = array[left], array[i]  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time O(logn)</span><br><span class=\"line\">Space O(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>What’s different?<br>Use the ‘for’ loop to substitute the ‘while’ loop.<br>Put one pointer j into the loop, another i to record the first number greater than key. Exchange the position when j met the requirement, which makes sure the sort process to the key value.</p>\n<p><strong>****</strong>Update<strong>*****</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(array) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pivot = array[<span class=\"number\">0</span>]</span><br><span class=\"line\">        smaller = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> i &lt; pivot]</span><br><span class=\"line\">        greater = [j <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> j &gt;= pivot]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quick_sort(smaller) + [pivot] + quick_sort(greater)</span><br></pre></td></tr></table></figure>\n<p>This method seems much simpler. Howvere, it enhances the usage of memory. The time complexity is the same, but the space is O(logn)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Inspired by <a href=\"https://blog.csdn.net/razor87/article/details/71155518\" target=\"_blank\" rel=\"noopener\">this blog</a>, I achieved several ways to build the quick_sort function.<br>Basic way:<br>My version use right as pivot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    head = left</span><br><span class=\"line\">    end = right</span><br><span class=\"line\">    key = array[end]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[left] &lt; key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        array[right] = array[left]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[right] &gt;= key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        array[left] = array[right]</span><br><span class=\"line\">    array[left] = key</span><br><span class=\"line\">    print(array, key)</span><br><span class=\"line\">    quick_sort(array, head, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(array, right + <span class=\"number\">1</span>, end)</span><br></pre></td></tr></table></figure>\n\n<p>The version in the blog which use left as pivot.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    low = left</span><br><span class=\"line\">    high = right</span><br><span class=\"line\">    key = array[low]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[right] &gt; key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        array[left] = array[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> array[left] &lt;= key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        array[right] = array[left]</span><br><span class=\"line\">    array[right] = key</span><br><span class=\"line\">    quick_sort(array, low, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(array, left + <span class=\"number\">1</span>, high)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time O(logn)</span><br><span class=\"line\">Space O(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Another way only uses one single loop:<br>Use right as pivot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        flag = partition(array, left, right)</span><br><span class=\"line\">        quick_sort(array, left, flag - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(array, flag + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    pivot = array[right]</span><br><span class=\"line\">    i = left - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> array[j] &lt;= pivot:</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            array[i], array[j] = array[j], array[i]</span><br><span class=\"line\">    array[i + <span class=\"number\">1</span>], array[right] = array[right], array[i + <span class=\"number\">1</span>]   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>Use left as pivot</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        flag = partition(array, left, right)</span><br><span class=\"line\">        quick_sort(array, left, flag - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(array, flag + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(array, left, right)</span>:</span></span><br><span class=\"line\">    pivot = array[left]</span><br><span class=\"line\">    i = left</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> array[j] &lt; pivot:</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            array[i], array[j] = array[j], array[i]</span><br><span class=\"line\">    array[i], array[left] = array[left], array[i]  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time O(logn)</span><br><span class=\"line\">Space O(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>What’s different?<br>Use the ‘for’ loop to substitute the ‘while’ loop.<br>Put one pointer j into the loop, another i to record the first number greater than key. Exchange the position when j met the requirement, which makes sure the sort process to the key value.</p>\n<p><strong>****</strong>Update<strong>*****</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(array)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(array) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pivot = array[<span class=\"number\">0</span>]</span><br><span class=\"line\">        smaller = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> i &lt; pivot]</span><br><span class=\"line\">        greater = [j <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> j &gt;= pivot]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quick_sort(smaller) + [pivot] + quick_sort(greater)</span><br></pre></td></tr></table></figure>\n<p>This method seems much simpler. Howvere, it enhances the usage of memory. The time complexity is the same, but the space is O(logn)</p>\n"},{"title":"variational_autoencoder","date":"2020-02-16T08:13:35.000Z","_content":"\nReference: [Resource Paper](https://arxiv.org/pdf/1312.6114.pdf)\nVariational AE is a kind of generative model, inspired by Autoencoders. It applied the variation inference to let the model learn the latent variables of the hidden distribution.\nHere we use the MNIST dataset inside the torchvision.\n### Data\n```Python\nimport os\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.utils.data\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\nfrom torchvision import datasets, transforms\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\ntrain_data = datasets.MNIST('../MNISTdata', train=True, download=True,\n                       transform=transforms.Compose([\n                           transforms.ToTensor(),\n                           transforms.Normalize((0.1307,), (0.3081,))\n                       ]))\ntest_data = datasets.MNIST('../MNISTdata', train=False, download=True,\n                       transform=transforms.Compose([\n                           transforms.ToTensor(),\n                           transforms.Normalize((0.1307,), (0.3081,))\n                       ])),\ntrain_loader = torch.utils.data.DataLoader(train_data, batch_size=32, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(test_data, batch_size=32, shuffle=True)\n```\n### Model\n#### model 1 (MLP)\n```Python\nclass VAE(nn.Module):\n    def __init__(self):\n        super(VAE,self).__init__()\n        self.fc1 = nn.Linear(784, 400)\n        self.fc21 = nn.Linear(400, 20)\n        self.fc22 = nn.Linear(400, 20)\n        self.fc3 = nn.Linear(20, 400)\n        self.fc4 = nn.Linear(400, 784)\n        self.relu = nn.ReLU()\n        self.sigmoid = nn.Sigmoid()\n        \n    def encoder(self, x):\n        h1 = self.relu(self.fc1(x))\n        return self.fc21(h1), self.fc22(h1)\n    \n    def decoder(self, z):\n        h3 = self.relu(self.fc3(z))\n        return self.sigmoid(self.fc4(h3))\n        \n    def reparameterize(self, mu,logvar):\n        std = logvar.mul(0.5).exp()\n        eps = Variable(std.data.new(std.size()).normal_())\n        return eps.mul(std).add_(mu)\n        \n    def forward(self, x):\n        mu, logvar = self.encoder(x.view(-1,784))\n        z = self.reparameterize(mu, logvar)\n        return self.decoder(z), mu, logvar\n```\n#### model 2 (CNN)\n``` Python\nclass VAE(nn.Module):\n    def __init__(self):\n        super(VAE, self).__init__()\n        self.hidden = 10\n        self.en_conv_1 = nn.Sequential(\n            nn.Conv2d(1, 16, 4, 2, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh(),\n            nn.Conv2d(16, 32, 4, 2, 1),\n            nn.BatchNorm2d(32),\n            nn.Tanh(),\n            nn.Conv2d(32, 16, 3, 1, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh()\n        )\n        self.en_conv_2 = nn.Sequential(\n            nn.Conv2d(1, 16, 4, 2, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh(),\n            nn.Conv2d(16, 32, 4, 2, 1),\n            nn.BatchNorm2d(32),\n            nn.Tanh(),\n            nn.Conv2d(32, 16, 3, 1, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh()\n        )\n        self.en_fc_1 = nn.Linear(16 * 7 * 7, self.hidden)\n        self.en_fc_2 = nn.Linear(16 * 7 * 7, self.hidden)\n        self.de_fc = nn.Linear(self.hidden, 16 * 7 * 7)\n        self.de_conv = nn.Sequential(\n            nn.ConvTranspose2d(16, 16, 4, 2, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh(),\n            nn.ConvTranspose2d(16, 1, 4, 2, 1),\n            nn.Sigmoid()\n        )\n    def encoder(self, x):\n        conv_out_1 = self.en_conv_1(x)\n        conv_out_1 = conv_out_1.view(x.size(0), -1)\n        conv_out_2 = self.en_conv_2(x)\n        conv_out_2 = conv_out_2.view(x.size(0), -1)\n        encoded_fc1 = self.en_fc_1(conv_out_1)\n        encoded_fc2 = self.en_fc_2(conv_out_2)\n        return encoded_fc1, encoded_fc2 \n\n    def sampler(self, mean, std):\n        var = std.mul(0.5).exp_()\n        eps = torch.FloatTensor(var.size()).normal_()  \n        eps = Variable(eps)\n        eps = eps.to(device)\n        return eps.mul(var).add_(mean)\n\n    def decoder(self, x):\n        out = self.de_fc(x)\n        out = out.view(-1, 16, 7, 7)\n        out = self.de_conv(out)\n        return out\n\n    def forward(self, x):\n        mean, std = self.encoder(x)\n        code = self.sampler(mean, std)\n        out = self.decoder(code)\n        return out, mean, std, code\n```\n### Loss function\n``` Python\n# reconstruction_function = nn.BCELoss()\nreconstruction_function = nn.MSELoss()\nreconstruction_function.size_average = False\n\ndef loss_function(recon_x, x, mu, logvar):\n    simple_loss = reconstruction_function(recon_x.view(-1, 784), x.view(-1, 784))\n    # 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)\n    KLD_element = mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)\n    KLD = torch.sum(KLD_element).mul_(-0.5)\n#     KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n    return simple_loss + 0.0002 * KLD\n```\n### Train\n``` Python\nmodel = VAE()\nmodel.to(device)\noptimizer = optim.Adam(model.parameters(), lr=1e-4)\nmodel.train()\nview_data = train_data.train_data[:5].view(-1,1,28,28).type(torch.cuda.FloatTensor)\n\nEPOCH = 50\nfor epoch in range(EPOCH):\n    for batch_idx, (data, _) in enumerate(train_loader):\n        data = data.to(device)\n        optimizer.zero_grad()\n        recon_batch, mu, logvar, _ = model(data)\n        loss = loss_function(recon_batch, data, mu, logvar)\n        loss.backward()\n        train_loss += loss.item()\n        optimizer.step()\n        if batch_idx % 100 == 0:\n            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n                epoch, batch_idx * len(data), len(train_loader.dataset),\n                100. * batch_idx / len(train_loader),\n                loss.item() / len(data)))\n            decoded_data, _, _, _ = model(view_data)\n            f, a = plt.subplots(2, 5, figsize=(5, 2))\n            for i in range(5):\n                a[0][i].imshow(np.reshape((view_data.cpu()).data.numpy()[i], (28, 28)), cmap='gray'); a[0][i].set_xticks(()); a[0][i].set_yticks(())\n            for i in range(5):\n                a[1][i].clear()\n                a[1][i].imshow(np.reshape((decoded_data.cpu()).data.numpy()[i], (28, 28)), cmap='gray')\n                a[1][i].set_xticks(())\n                a[1][i].set_yticks(())\n            plt.show()\n```\n### Result\nHere is the result using model 2, since model 1 has a poor performance. The upper images are original data, and the bottom images are generated by VAE model.\n\n![epoch1.png](https://upload-images.jianshu.io/upload_images/18864424-285afecae0fe2835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch3.png](https://upload-images.jianshu.io/upload_images/18864424-2cf77d17460f6516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch5.png](https://upload-images.jianshu.io/upload_images/18864424-19a6c0a12f35e0fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch10.png](https://upload-images.jianshu.io/upload_images/18864424-3369749ad5faa840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch20.png](https://upload-images.jianshu.io/upload_images/18864424-7c49379c7b1680f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch30.png](https://upload-images.jianshu.io/upload_images/18864424-580109903524640d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch40.png](https://upload-images.jianshu.io/upload_images/18864424-323bf96829d5fdaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch50.png](https://upload-images.jianshu.io/upload_images/18864424-afcd2550c22d290f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nTo generate some more images, it is easy to use the **decoder** function of a trained model, by modifying the input of **sampler** (mean and std).","source":"_posts/variational-autoencoder.md","raw":"---\ntitle: variational_autoencoder\ndate: 2020-02-16 00:13:35\ntags: Deeplearning\n---\n\nReference: [Resource Paper](https://arxiv.org/pdf/1312.6114.pdf)\nVariational AE is a kind of generative model, inspired by Autoencoders. It applied the variation inference to let the model learn the latent variables of the hidden distribution.\nHere we use the MNIST dataset inside the torchvision.\n### Data\n```Python\nimport os\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.utils.data\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\nfrom torchvision import datasets, transforms\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\ntrain_data = datasets.MNIST('../MNISTdata', train=True, download=True,\n                       transform=transforms.Compose([\n                           transforms.ToTensor(),\n                           transforms.Normalize((0.1307,), (0.3081,))\n                       ]))\ntest_data = datasets.MNIST('../MNISTdata', train=False, download=True,\n                       transform=transforms.Compose([\n                           transforms.ToTensor(),\n                           transforms.Normalize((0.1307,), (0.3081,))\n                       ])),\ntrain_loader = torch.utils.data.DataLoader(train_data, batch_size=32, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(test_data, batch_size=32, shuffle=True)\n```\n### Model\n#### model 1 (MLP)\n```Python\nclass VAE(nn.Module):\n    def __init__(self):\n        super(VAE,self).__init__()\n        self.fc1 = nn.Linear(784, 400)\n        self.fc21 = nn.Linear(400, 20)\n        self.fc22 = nn.Linear(400, 20)\n        self.fc3 = nn.Linear(20, 400)\n        self.fc4 = nn.Linear(400, 784)\n        self.relu = nn.ReLU()\n        self.sigmoid = nn.Sigmoid()\n        \n    def encoder(self, x):\n        h1 = self.relu(self.fc1(x))\n        return self.fc21(h1), self.fc22(h1)\n    \n    def decoder(self, z):\n        h3 = self.relu(self.fc3(z))\n        return self.sigmoid(self.fc4(h3))\n        \n    def reparameterize(self, mu,logvar):\n        std = logvar.mul(0.5).exp()\n        eps = Variable(std.data.new(std.size()).normal_())\n        return eps.mul(std).add_(mu)\n        \n    def forward(self, x):\n        mu, logvar = self.encoder(x.view(-1,784))\n        z = self.reparameterize(mu, logvar)\n        return self.decoder(z), mu, logvar\n```\n#### model 2 (CNN)\n``` Python\nclass VAE(nn.Module):\n    def __init__(self):\n        super(VAE, self).__init__()\n        self.hidden = 10\n        self.en_conv_1 = nn.Sequential(\n            nn.Conv2d(1, 16, 4, 2, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh(),\n            nn.Conv2d(16, 32, 4, 2, 1),\n            nn.BatchNorm2d(32),\n            nn.Tanh(),\n            nn.Conv2d(32, 16, 3, 1, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh()\n        )\n        self.en_conv_2 = nn.Sequential(\n            nn.Conv2d(1, 16, 4, 2, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh(),\n            nn.Conv2d(16, 32, 4, 2, 1),\n            nn.BatchNorm2d(32),\n            nn.Tanh(),\n            nn.Conv2d(32, 16, 3, 1, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh()\n        )\n        self.en_fc_1 = nn.Linear(16 * 7 * 7, self.hidden)\n        self.en_fc_2 = nn.Linear(16 * 7 * 7, self.hidden)\n        self.de_fc = nn.Linear(self.hidden, 16 * 7 * 7)\n        self.de_conv = nn.Sequential(\n            nn.ConvTranspose2d(16, 16, 4, 2, 1),\n            nn.BatchNorm2d(16),\n            nn.Tanh(),\n            nn.ConvTranspose2d(16, 1, 4, 2, 1),\n            nn.Sigmoid()\n        )\n    def encoder(self, x):\n        conv_out_1 = self.en_conv_1(x)\n        conv_out_1 = conv_out_1.view(x.size(0), -1)\n        conv_out_2 = self.en_conv_2(x)\n        conv_out_2 = conv_out_2.view(x.size(0), -1)\n        encoded_fc1 = self.en_fc_1(conv_out_1)\n        encoded_fc2 = self.en_fc_2(conv_out_2)\n        return encoded_fc1, encoded_fc2 \n\n    def sampler(self, mean, std):\n        var = std.mul(0.5).exp_()\n        eps = torch.FloatTensor(var.size()).normal_()  \n        eps = Variable(eps)\n        eps = eps.to(device)\n        return eps.mul(var).add_(mean)\n\n    def decoder(self, x):\n        out = self.de_fc(x)\n        out = out.view(-1, 16, 7, 7)\n        out = self.de_conv(out)\n        return out\n\n    def forward(self, x):\n        mean, std = self.encoder(x)\n        code = self.sampler(mean, std)\n        out = self.decoder(code)\n        return out, mean, std, code\n```\n### Loss function\n``` Python\n# reconstruction_function = nn.BCELoss()\nreconstruction_function = nn.MSELoss()\nreconstruction_function.size_average = False\n\ndef loss_function(recon_x, x, mu, logvar):\n    simple_loss = reconstruction_function(recon_x.view(-1, 784), x.view(-1, 784))\n    # 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)\n    KLD_element = mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)\n    KLD = torch.sum(KLD_element).mul_(-0.5)\n#     KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n    return simple_loss + 0.0002 * KLD\n```\n### Train\n``` Python\nmodel = VAE()\nmodel.to(device)\noptimizer = optim.Adam(model.parameters(), lr=1e-4)\nmodel.train()\nview_data = train_data.train_data[:5].view(-1,1,28,28).type(torch.cuda.FloatTensor)\n\nEPOCH = 50\nfor epoch in range(EPOCH):\n    for batch_idx, (data, _) in enumerate(train_loader):\n        data = data.to(device)\n        optimizer.zero_grad()\n        recon_batch, mu, logvar, _ = model(data)\n        loss = loss_function(recon_batch, data, mu, logvar)\n        loss.backward()\n        train_loss += loss.item()\n        optimizer.step()\n        if batch_idx % 100 == 0:\n            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n                epoch, batch_idx * len(data), len(train_loader.dataset),\n                100. * batch_idx / len(train_loader),\n                loss.item() / len(data)))\n            decoded_data, _, _, _ = model(view_data)\n            f, a = plt.subplots(2, 5, figsize=(5, 2))\n            for i in range(5):\n                a[0][i].imshow(np.reshape((view_data.cpu()).data.numpy()[i], (28, 28)), cmap='gray'); a[0][i].set_xticks(()); a[0][i].set_yticks(())\n            for i in range(5):\n                a[1][i].clear()\n                a[1][i].imshow(np.reshape((decoded_data.cpu()).data.numpy()[i], (28, 28)), cmap='gray')\n                a[1][i].set_xticks(())\n                a[1][i].set_yticks(())\n            plt.show()\n```\n### Result\nHere is the result using model 2, since model 1 has a poor performance. The upper images are original data, and the bottom images are generated by VAE model.\n\n![epoch1.png](https://upload-images.jianshu.io/upload_images/18864424-285afecae0fe2835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch3.png](https://upload-images.jianshu.io/upload_images/18864424-2cf77d17460f6516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch5.png](https://upload-images.jianshu.io/upload_images/18864424-19a6c0a12f35e0fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch10.png](https://upload-images.jianshu.io/upload_images/18864424-3369749ad5faa840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch20.png](https://upload-images.jianshu.io/upload_images/18864424-7c49379c7b1680f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch30.png](https://upload-images.jianshu.io/upload_images/18864424-580109903524640d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch40.png](https://upload-images.jianshu.io/upload_images/18864424-323bf96829d5fdaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![epoch50.png](https://upload-images.jianshu.io/upload_images/18864424-afcd2550c22d290f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nTo generate some more images, it is easy to use the **decoder** function of a trained model, by modifying the input of **sampler** (mean and std).","slug":"variational-autoencoder","published":1,"updated":"2020-02-16T08:26:48.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rnfu7t0008uwu0992ve615","content":"<p>Reference: <a href=\"https://arxiv.org/pdf/1312.6114.pdf\" target=\"_blank\" rel=\"noopener\">Resource Paper</a><br>Variational AE is a kind of generative model, inspired by Autoencoders. It applied the variation inference to let the model learn the latent variables of the hidden distribution.<br>Here we use the MNIST dataset inside the torchvision.</p>\n<h3 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.utils.data</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.autograd <span class=\"keyword\">import</span> Variable</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> datasets, transforms</span><br><span class=\"line\">device = <span class=\"string\">'cuda'</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">'cpu'</span></span><br><span class=\"line\">train_data = datasets.MNIST(<span class=\"string\">'../MNISTdata'</span>, train=<span class=\"literal\">True</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                       transform=transforms.Compose([</span><br><span class=\"line\">                           transforms.ToTensor(),</span><br><span class=\"line\">                           transforms.Normalize((<span class=\"number\">0.1307</span>,), (<span class=\"number\">0.3081</span>,))</span><br><span class=\"line\">                       ]))</span><br><span class=\"line\">test_data = datasets.MNIST(<span class=\"string\">'../MNISTdata'</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                       transform=transforms.Compose([</span><br><span class=\"line\">                           transforms.ToTensor(),</span><br><span class=\"line\">                           transforms.Normalize((<span class=\"number\">0.1307</span>,), (<span class=\"number\">0.3081</span>,))</span><br><span class=\"line\">                       ])),</span><br><span class=\"line\">train_loader = torch.utils.data.DataLoader(train_data, batch_size=<span class=\"number\">32</span>, shuffle=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_loader = torch.utils.data.DataLoader(test_data, batch_size=<span class=\"number\">32</span>, shuffle=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><h4 id=\"model-1-MLP\"><a href=\"#model-1-MLP\" class=\"headerlink\" title=\"model 1 (MLP)\"></a>model 1 (MLP)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VAE</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        super(VAE,self).__init__()</span><br><span class=\"line\">        self.fc1 = nn.Linear(<span class=\"number\">784</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        self.fc21 = nn.Linear(<span class=\"number\">400</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        self.fc22 = nn.Linear(<span class=\"number\">400</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        self.fc3 = nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        self.fc4 = nn.Linear(<span class=\"number\">400</span>, <span class=\"number\">784</span>)</span><br><span class=\"line\">        self.relu = nn.ReLU()</span><br><span class=\"line\">        self.sigmoid = nn.Sigmoid()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encoder</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        h1 = self.relu(self.fc1(x))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.fc21(h1), self.fc22(h1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decoder</span><span class=\"params\">(self, z)</span>:</span></span><br><span class=\"line\">        h3 = self.relu(self.fc3(z))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.sigmoid(self.fc4(h3))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reparameterize</span><span class=\"params\">(self, mu,logvar)</span>:</span></span><br><span class=\"line\">        std = logvar.mul(<span class=\"number\">0.5</span>).exp()</span><br><span class=\"line\">        eps = Variable(std.data.new(std.size()).normal_())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eps.mul(std).add_(mu)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        mu, logvar = self.encoder(x.view(<span class=\"number\">-1</span>,<span class=\"number\">784</span>))</span><br><span class=\"line\">        z = self.reparameterize(mu, logvar)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.decoder(z), mu, logvar</span><br></pre></td></tr></table></figure>\n<h4 id=\"model-2-CNN\"><a href=\"#model-2-CNN\" class=\"headerlink\" title=\"model 2 (CNN)\"></a>model 2 (CNN)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VAE</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        super(VAE, self).__init__()</span><br><span class=\"line\">        self.hidden = <span class=\"number\">10</span></span><br><span class=\"line\">        self.en_conv_1 = nn.Sequential(</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">16</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">32</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.en_conv_2 = nn.Sequential(</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">16</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">32</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.en_fc_1 = nn.Linear(<span class=\"number\">16</span> * <span class=\"number\">7</span> * <span class=\"number\">7</span>, self.hidden)</span><br><span class=\"line\">        self.en_fc_2 = nn.Linear(<span class=\"number\">16</span> * <span class=\"number\">7</span> * <span class=\"number\">7</span>, self.hidden)</span><br><span class=\"line\">        self.de_fc = nn.Linear(self.hidden, <span class=\"number\">16</span> * <span class=\"number\">7</span> * <span class=\"number\">7</span>)</span><br><span class=\"line\">        self.de_conv = nn.Sequential(</span><br><span class=\"line\">            nn.ConvTranspose2d(<span class=\"number\">16</span>, <span class=\"number\">16</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.ConvTranspose2d(<span class=\"number\">16</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.Sigmoid()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encoder</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        conv_out_1 = self.en_conv_1(x)</span><br><span class=\"line\">        conv_out_1 = conv_out_1.view(x.size(<span class=\"number\">0</span>), <span class=\"number\">-1</span>)</span><br><span class=\"line\">        conv_out_2 = self.en_conv_2(x)</span><br><span class=\"line\">        conv_out_2 = conv_out_2.view(x.size(<span class=\"number\">0</span>), <span class=\"number\">-1</span>)</span><br><span class=\"line\">        encoded_fc1 = self.en_fc_1(conv_out_1)</span><br><span class=\"line\">        encoded_fc2 = self.en_fc_2(conv_out_2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encoded_fc1, encoded_fc2 </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sampler</span><span class=\"params\">(self, mean, std)</span>:</span></span><br><span class=\"line\">        var = std.mul(<span class=\"number\">0.5</span>).exp_()</span><br><span class=\"line\">        eps = torch.FloatTensor(var.size()).normal_()  </span><br><span class=\"line\">        eps = Variable(eps)</span><br><span class=\"line\">        eps = eps.to(device)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eps.mul(var).add_(mean)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decoder</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        out = self.de_fc(x)</span><br><span class=\"line\">        out = out.view(<span class=\"number\">-1</span>, <span class=\"number\">16</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">        out = self.de_conv(out)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        mean, std = self.encoder(x)</span><br><span class=\"line\">        code = self.sampler(mean, std)</span><br><span class=\"line\">        out = self.decoder(code)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out, mean, std, code</span><br></pre></td></tr></table></figure>\n<h3 id=\"Loss-function\"><a href=\"#Loss-function\" class=\"headerlink\" title=\"Loss function\"></a>Loss function</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># reconstruction_function = nn.BCELoss()</span></span><br><span class=\"line\">reconstruction_function = nn.MSELoss()</span><br><span class=\"line\">reconstruction_function.size_average = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss_function</span><span class=\"params\">(recon_x, x, mu, logvar)</span>:</span></span><br><span class=\"line\">    simple_loss = reconstruction_function(recon_x.view(<span class=\"number\">-1</span>, <span class=\"number\">784</span>), x.view(<span class=\"number\">-1</span>, <span class=\"number\">784</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)</span></span><br><span class=\"line\">    KLD_element = mu.pow(<span class=\"number\">2</span>).add_(logvar.exp()).mul_(<span class=\"number\">-1</span>).add_(<span class=\"number\">1</span>).add_(logvar)</span><br><span class=\"line\">    KLD = torch.sum(KLD_element).mul_(<span class=\"number\">-0.5</span>)</span><br><span class=\"line\"><span class=\"comment\">#     KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> simple_loss + <span class=\"number\">0.0002</span> * KLD</span><br></pre></td></tr></table></figure>\n<h3 id=\"Train\"><a href=\"#Train\" class=\"headerlink\" title=\"Train\"></a>Train</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = VAE()</span><br><span class=\"line\">model.to(device)</span><br><span class=\"line\">optimizer = optim.Adam(model.parameters(), lr=<span class=\"number\">1e-4</span>)</span><br><span class=\"line\">model.train()</span><br><span class=\"line\">view_data = train_data.train_data[:<span class=\"number\">5</span>].view(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>).type(torch.cuda.FloatTensor)</span><br><span class=\"line\"></span><br><span class=\"line\">EPOCH = <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> range(EPOCH):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> batch_idx, (data, _) <span class=\"keyword\">in</span> enumerate(train_loader):</span><br><span class=\"line\">        data = data.to(device)</span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        recon_batch, mu, logvar, _ = model(data)</span><br><span class=\"line\">        loss = loss_function(recon_batch, data, mu, logvar)</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        train_loss += loss.item()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> batch_idx % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\\tLoss: &#123;:.6f&#125;'</span>.format(</span><br><span class=\"line\">                epoch, batch_idx * len(data), len(train_loader.dataset),</span><br><span class=\"line\">                <span class=\"number\">100.</span> * batch_idx / len(train_loader),</span><br><span class=\"line\">                loss.item() / len(data)))</span><br><span class=\"line\">            decoded_data, _, _, _ = model(view_data)</span><br><span class=\"line\">            f, a = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">5</span>, figsize=(<span class=\"number\">5</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">                a[<span class=\"number\">0</span>][i].imshow(np.reshape((view_data.cpu()).data.numpy()[i], (<span class=\"number\">28</span>, <span class=\"number\">28</span>)), cmap=<span class=\"string\">'gray'</span>); a[<span class=\"number\">0</span>][i].set_xticks(()); a[<span class=\"number\">0</span>][i].set_yticks(())</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].clear()</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].imshow(np.reshape((decoded_data.cpu()).data.numpy()[i], (<span class=\"number\">28</span>, <span class=\"number\">28</span>)), cmap=<span class=\"string\">'gray'</span>)</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].set_xticks(())</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].set_yticks(())</span><br><span class=\"line\">            plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h3><p>Here is the result using model 2, since model 1 has a poor performance. The upper images are original data, and the bottom images are generated by VAE model.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-285afecae0fe2835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch1.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-2cf77d17460f6516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch3.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-19a6c0a12f35e0fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch5.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-3369749ad5faa840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch10.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-7c49379c7b1680f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch20.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-580109903524640d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch30.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-323bf96829d5fdaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch40.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-afcd2550c22d290f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch50.png\"></p>\n<p>To generate some more images, it is easy to use the <strong>decoder</strong> function of a trained model, by modifying the input of <strong>sampler</strong> (mean and std).</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Reference: <a href=\"https://arxiv.org/pdf/1312.6114.pdf\" target=\"_blank\" rel=\"noopener\">Resource Paper</a><br>Variational AE is a kind of generative model, inspired by Autoencoders. It applied the variation inference to let the model learn the latent variables of the hidden distribution.<br>Here we use the MNIST dataset inside the torchvision.</p>\n<h3 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.utils.data</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.autograd <span class=\"keyword\">import</span> Variable</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> datasets, transforms</span><br><span class=\"line\">device = <span class=\"string\">'cuda'</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">'cpu'</span></span><br><span class=\"line\">train_data = datasets.MNIST(<span class=\"string\">'../MNISTdata'</span>, train=<span class=\"literal\">True</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                       transform=transforms.Compose([</span><br><span class=\"line\">                           transforms.ToTensor(),</span><br><span class=\"line\">                           transforms.Normalize((<span class=\"number\">0.1307</span>,), (<span class=\"number\">0.3081</span>,))</span><br><span class=\"line\">                       ]))</span><br><span class=\"line\">test_data = datasets.MNIST(<span class=\"string\">'../MNISTdata'</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                       transform=transforms.Compose([</span><br><span class=\"line\">                           transforms.ToTensor(),</span><br><span class=\"line\">                           transforms.Normalize((<span class=\"number\">0.1307</span>,), (<span class=\"number\">0.3081</span>,))</span><br><span class=\"line\">                       ])),</span><br><span class=\"line\">train_loader = torch.utils.data.DataLoader(train_data, batch_size=<span class=\"number\">32</span>, shuffle=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_loader = torch.utils.data.DataLoader(test_data, batch_size=<span class=\"number\">32</span>, shuffle=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><h4 id=\"model-1-MLP\"><a href=\"#model-1-MLP\" class=\"headerlink\" title=\"model 1 (MLP)\"></a>model 1 (MLP)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VAE</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        super(VAE,self).__init__()</span><br><span class=\"line\">        self.fc1 = nn.Linear(<span class=\"number\">784</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        self.fc21 = nn.Linear(<span class=\"number\">400</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        self.fc22 = nn.Linear(<span class=\"number\">400</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        self.fc3 = nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        self.fc4 = nn.Linear(<span class=\"number\">400</span>, <span class=\"number\">784</span>)</span><br><span class=\"line\">        self.relu = nn.ReLU()</span><br><span class=\"line\">        self.sigmoid = nn.Sigmoid()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encoder</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        h1 = self.relu(self.fc1(x))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.fc21(h1), self.fc22(h1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decoder</span><span class=\"params\">(self, z)</span>:</span></span><br><span class=\"line\">        h3 = self.relu(self.fc3(z))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.sigmoid(self.fc4(h3))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reparameterize</span><span class=\"params\">(self, mu,logvar)</span>:</span></span><br><span class=\"line\">        std = logvar.mul(<span class=\"number\">0.5</span>).exp()</span><br><span class=\"line\">        eps = Variable(std.data.new(std.size()).normal_())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eps.mul(std).add_(mu)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        mu, logvar = self.encoder(x.view(<span class=\"number\">-1</span>,<span class=\"number\">784</span>))</span><br><span class=\"line\">        z = self.reparameterize(mu, logvar)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.decoder(z), mu, logvar</span><br></pre></td></tr></table></figure>\n<h4 id=\"model-2-CNN\"><a href=\"#model-2-CNN\" class=\"headerlink\" title=\"model 2 (CNN)\"></a>model 2 (CNN)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VAE</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        super(VAE, self).__init__()</span><br><span class=\"line\">        self.hidden = <span class=\"number\">10</span></span><br><span class=\"line\">        self.en_conv_1 = nn.Sequential(</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">16</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">32</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.en_conv_2 = nn.Sequential(</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">16</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">32</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.Conv2d(<span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.en_fc_1 = nn.Linear(<span class=\"number\">16</span> * <span class=\"number\">7</span> * <span class=\"number\">7</span>, self.hidden)</span><br><span class=\"line\">        self.en_fc_2 = nn.Linear(<span class=\"number\">16</span> * <span class=\"number\">7</span> * <span class=\"number\">7</span>, self.hidden)</span><br><span class=\"line\">        self.de_fc = nn.Linear(self.hidden, <span class=\"number\">16</span> * <span class=\"number\">7</span> * <span class=\"number\">7</span>)</span><br><span class=\"line\">        self.de_conv = nn.Sequential(</span><br><span class=\"line\">            nn.ConvTranspose2d(<span class=\"number\">16</span>, <span class=\"number\">16</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.BatchNorm2d(<span class=\"number\">16</span>),</span><br><span class=\"line\">            nn.Tanh(),</span><br><span class=\"line\">            nn.ConvTranspose2d(<span class=\"number\">16</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            nn.Sigmoid()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encoder</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        conv_out_1 = self.en_conv_1(x)</span><br><span class=\"line\">        conv_out_1 = conv_out_1.view(x.size(<span class=\"number\">0</span>), <span class=\"number\">-1</span>)</span><br><span class=\"line\">        conv_out_2 = self.en_conv_2(x)</span><br><span class=\"line\">        conv_out_2 = conv_out_2.view(x.size(<span class=\"number\">0</span>), <span class=\"number\">-1</span>)</span><br><span class=\"line\">        encoded_fc1 = self.en_fc_1(conv_out_1)</span><br><span class=\"line\">        encoded_fc2 = self.en_fc_2(conv_out_2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encoded_fc1, encoded_fc2 </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sampler</span><span class=\"params\">(self, mean, std)</span>:</span></span><br><span class=\"line\">        var = std.mul(<span class=\"number\">0.5</span>).exp_()</span><br><span class=\"line\">        eps = torch.FloatTensor(var.size()).normal_()  </span><br><span class=\"line\">        eps = Variable(eps)</span><br><span class=\"line\">        eps = eps.to(device)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eps.mul(var).add_(mean)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decoder</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        out = self.de_fc(x)</span><br><span class=\"line\">        out = out.view(<span class=\"number\">-1</span>, <span class=\"number\">16</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">        out = self.de_conv(out)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        mean, std = self.encoder(x)</span><br><span class=\"line\">        code = self.sampler(mean, std)</span><br><span class=\"line\">        out = self.decoder(code)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out, mean, std, code</span><br></pre></td></tr></table></figure>\n<h3 id=\"Loss-function\"><a href=\"#Loss-function\" class=\"headerlink\" title=\"Loss function\"></a>Loss function</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># reconstruction_function = nn.BCELoss()</span></span><br><span class=\"line\">reconstruction_function = nn.MSELoss()</span><br><span class=\"line\">reconstruction_function.size_average = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss_function</span><span class=\"params\">(recon_x, x, mu, logvar)</span>:</span></span><br><span class=\"line\">    simple_loss = reconstruction_function(recon_x.view(<span class=\"number\">-1</span>, <span class=\"number\">784</span>), x.view(<span class=\"number\">-1</span>, <span class=\"number\">784</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)</span></span><br><span class=\"line\">    KLD_element = mu.pow(<span class=\"number\">2</span>).add_(logvar.exp()).mul_(<span class=\"number\">-1</span>).add_(<span class=\"number\">1</span>).add_(logvar)</span><br><span class=\"line\">    KLD = torch.sum(KLD_element).mul_(<span class=\"number\">-0.5</span>)</span><br><span class=\"line\"><span class=\"comment\">#     KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> simple_loss + <span class=\"number\">0.0002</span> * KLD</span><br></pre></td></tr></table></figure>\n<h3 id=\"Train\"><a href=\"#Train\" class=\"headerlink\" title=\"Train\"></a>Train</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = VAE()</span><br><span class=\"line\">model.to(device)</span><br><span class=\"line\">optimizer = optim.Adam(model.parameters(), lr=<span class=\"number\">1e-4</span>)</span><br><span class=\"line\">model.train()</span><br><span class=\"line\">view_data = train_data.train_data[:<span class=\"number\">5</span>].view(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>).type(torch.cuda.FloatTensor)</span><br><span class=\"line\"></span><br><span class=\"line\">EPOCH = <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> range(EPOCH):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> batch_idx, (data, _) <span class=\"keyword\">in</span> enumerate(train_loader):</span><br><span class=\"line\">        data = data.to(device)</span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        recon_batch, mu, logvar, _ = model(data)</span><br><span class=\"line\">        loss = loss_function(recon_batch, data, mu, logvar)</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        train_loss += loss.item()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> batch_idx % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\\tLoss: &#123;:.6f&#125;'</span>.format(</span><br><span class=\"line\">                epoch, batch_idx * len(data), len(train_loader.dataset),</span><br><span class=\"line\">                <span class=\"number\">100.</span> * batch_idx / len(train_loader),</span><br><span class=\"line\">                loss.item() / len(data)))</span><br><span class=\"line\">            decoded_data, _, _, _ = model(view_data)</span><br><span class=\"line\">            f, a = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">5</span>, figsize=(<span class=\"number\">5</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">                a[<span class=\"number\">0</span>][i].imshow(np.reshape((view_data.cpu()).data.numpy()[i], (<span class=\"number\">28</span>, <span class=\"number\">28</span>)), cmap=<span class=\"string\">'gray'</span>); a[<span class=\"number\">0</span>][i].set_xticks(()); a[<span class=\"number\">0</span>][i].set_yticks(())</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].clear()</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].imshow(np.reshape((decoded_data.cpu()).data.numpy()[i], (<span class=\"number\">28</span>, <span class=\"number\">28</span>)), cmap=<span class=\"string\">'gray'</span>)</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].set_xticks(())</span><br><span class=\"line\">                a[<span class=\"number\">1</span>][i].set_yticks(())</span><br><span class=\"line\">            plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h3><p>Here is the result using model 2, since model 1 has a poor performance. The upper images are original data, and the bottom images are generated by VAE model.</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-285afecae0fe2835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch1.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-2cf77d17460f6516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch3.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-19a6c0a12f35e0fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch5.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-3369749ad5faa840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch10.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-7c49379c7b1680f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch20.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-580109903524640d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch30.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-323bf96829d5fdaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch40.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18864424-afcd2550c22d290f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"epoch50.png\"></p>\n<p>To generate some more images, it is easy to use the <strong>decoder</strong> function of a trained model, by modifying the input of <strong>sampler</strong> (mean and std).</p>\n"},{"title":"test","date":"2020-02-18T08:52:27.000Z","_content":"\ntest","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2020-02-18 00:52:27\ntags:\n---\n\ntest","slug":"test","published":1,"updated":"2020-02-18T08:52:34.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rngiox0000yyu04loq0nb2","content":"<p>test</p>\n","site":{"data":{}},"excerpt":"","more":"<p>test</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck6rnfu7k0000uwu0gttm7tlb","tag_id":"ck6rnfu7p0002uwu03wccgaag","_id":"ck6rnfu7s0007uwu0hsymg9of"},{"post_id":"ck6rnfu7q0003uwu090nt28yh","tag_id":"ck6rnfu7s0006uwu0924sg2mx","_id":"ck6rnfu7u000auwu02emygglu"},{"post_id":"ck6rnfu7t0008uwu0992ve615","tag_id":"ck6rnfu7t0009uwu07lvv8k81","_id":"ck6rnfu7u000buwu0052vbwes"}],"Tag":[{"name":"Machinelearning","_id":"ck6rnfu7p0002uwu03wccgaag"},{"name":"leetcode DynamicProgrammming","_id":"ck6rnfu7s0006uwu0924sg2mx"},{"name":"Deeplearning","_id":"ck6rnfu7t0009uwu07lvv8k81"}]}}